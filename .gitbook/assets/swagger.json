{
  "openapi": "3.0.0",
  "paths": {
    "/api/v1/swap/quote": {
      "get": {
        "operationId": "SwapController_quote",
        "summary": "This endpoint returns the estimation details and the transaction data of a swap",
        "description": "This endpoint finds a route with potentially the best possible outcome for the requested pair. If ```userAddress``` is provided, it also returns the necessary details — ```from```, ```to```, ```data```, ```value```, and ```gasLimit``` — required for executing a swap transaction.",
        "parameters": [
          {
            "name": "fromToken",
            "required": true,
            "in": "query",
            "description": "Source token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[symbol]": "MATIC"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "toToken",
            "required": true,
            "in": "query",
            "description": "Destination token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "toToken[address]": "0x483dd3425278C1f79F377f1034d9d2CaE55648B6",
              "toToken[chainId]": 137,
              "toToken[decimals]": 18,
              "toToken[symbol]": "CROWD"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of ```fromToken``` to be swapped (The decimal of token must be considered in the amount)",
            "examples": {
              "1 MATIC (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": false,
            "in": "query",
            "description": "The price of the selected network's coin based on USD. __Example: ```price of BNB = 245.82```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": false,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "gasPrice",
            "required": false,
            "in": "query",
            "description": "Gas Price based on selected network (The unit is gwei)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filteredDexNames",
            "required": false,
            "in": "query",
            "description": "filters dexes to be searched for an estimation, providing results only from these selected dexes.",
            "example": "CrowdswapAggregator,CrowdSwapV2,Quickswap",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "userAddress",
            "required": false,
            "in": "query",
            "description": "If provided, the API returns the swapTx as well as the estimation. The \"from\" address of the transaction will be the ```userAddress```. The \"to\" address will be the ```receiverAddress``` specified in the request, if provided; otherwise, it will default to the ```userAddress```.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverAddress",
            "required": false,
            "in": "query",
            "description": "Address of the recipient. Provide this value only if it differs from the ```userAddress``` property.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimatedTradeDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No quote found for the given pair"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "swap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/swap/estimate-all": {
      "get": {
        "operationId": "SwapController_getAllSwapEstimate",
        "summary": "This endpoint provides the estimation details for all integrated dexes based on profit",
        "description": "This endpoint retrieves a list of decentralized exchanges (dexes) where the selected pair can be swapped. The list is sorted by profit, so we recommend choosing the first dex in the list.",
        "parameters": [
          {
            "name": "fromToken",
            "required": true,
            "in": "query",
            "description": "Source token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[symbol]": "MATIC"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "toToken",
            "required": true,
            "in": "query",
            "description": "Destination token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "toToken[address]": "0x483dd3425278C1f79F377f1034d9d2CaE55648B6",
              "toToken[chainId]": 137,
              "toToken[decimals]": 18,
              "toToken[symbol]": "CROWD"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of ```fromToken``` to be swapped (The decimal of token must be considered in the amount)",
            "examples": {
              "1 MATIC (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": false,
            "in": "query",
            "description": "The price of the selected network's coin based on USD. __Example: ```price of BNB = 245.82```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": false,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "gasPrice",
            "required": false,
            "in": "query",
            "description": "Gas Price based on selected network (The unit is gwei)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filteredDexNames",
            "required": false,
            "in": "query",
            "description": "filters dexes to be searched for an estimation, providing results only from these selected dexes.",
            "example": "CrowdswapAggregator,CrowdSwapV2,Quickswap",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "userAddress",
            "required": false,
            "in": "query",
            "description": "If provided, the API returns the swapTx as well as the estimation. The \"from\" address of the transaction will be the ```userAddress```. The \"to\" address will be the ```receiverAddress``` specified in the request, if provided; otherwise, it will default to the ```userAddress```.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverAddress",
            "required": false,
            "in": "query",
            "description": "Address of the recipient. Provide this value only if it differs from the ```userAddress``` property.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllEstimationResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No estimation found for the given pair"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "swap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/swap/{dex}": {
      "get": {
        "operationId": "SwapController_getSwap",
        "summary": "This endpoint returns the transaction data of a swap",
        "description": "This endpoint returns the necessary details — ```from```, ```to```, ```data```, ```value```, and ```gasLimit``` — required for executing a swap transaction.  \n  \n* A dex name must be added to the url. The dex name can be found in estimation e.g., ```CrowdswapV2```, ```Quickswap```",
        "parameters": [
          {
            "name": "fromToken",
            "required": true,
            "in": "query",
            "description": "Source token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[symbol]": "MATIC"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "toToken",
            "required": true,
            "in": "query",
            "description": "Destination token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "toToken[address]": "0x483dd3425278C1f79F377f1034d9d2CaE55648B6",
              "toToken[chainId]": 137,
              "toToken[decimals]": 18,
              "toToken[symbol]": "CROWD"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of ```fromToken``` to be swapped (The decimal of token must be considered in the amount)",
            "examples": {
              "1 MATIC (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": false,
            "in": "query",
            "description": "The price of the selected network's coin based on USD. __Example: ```price of BNB = 245.82```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": false,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "If provided, the API returns the swapTx as well as the estimation. The \"from\" address of the transaction will be the ```userAddress```. The \"to\" address will be the ```receiverAddress``` specified in the request, if provided; otherwise, it will default to the ```userAddress```.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverAddress",
            "required": false,
            "in": "query",
            "description": "Address of the recipient. Provide this value only if it differs from the ```userAddress``` property.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amountOutMin",
            "required": false,
            "in": "query",
            "description": "The minimum amount out expected from a swap (This amount is available in the estimation result. Also the decimal of token must be considered in the amount)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "required": false,
            "in": "query",
            "description": "Swap estimation will be expired after this deadline (The unit of deadline is based on minutes)",
            "examples": {
              "15": {
                "value": "15"
              },
              "20": {
                "value": "20"
              },
              "30": {
                "value": "30"
              }
            },
            "schema": {
              "default": "30",
              "type": "string"
            }
          },
          {
            "name": "dex",
            "required": true,
            "in": "path",
            "description": "The dex name which will be used for the swap transaction. This value is available in the estimation result as ```swapName```",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "swap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/swap/cross-dex": {
      "get": {
        "operationId": "SwapController_getCrossDexSwap",
        "summary": "This endpoint returns the transaction data of a cross-dex swap",
        "description": "This endpoint must be called if the ```estimate-all``` endpoint returns a cross-dex estimation. If the estimation, typically the first index in the ```successfulEstimationsList``` list, includes ```firstDex``` and ```secondDex``` properties, it means that a potential connection between two dexes is available for creating an optimal route. The endpoint returns the necessary details — ```from```, ```to```, ```data```, ```value```, and ```gasLimit``` — required for executing a cross-dex swap transaction.",
        "parameters": [
          {
            "name": "fromToken",
            "required": true,
            "in": "query",
            "description": "Source token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[symbol]": "MATIC"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "toToken",
            "required": true,
            "in": "query",
            "description": "Destination token. (Supported values for chainId are 1, 56, 137, 43114, 42161 and 324)",
            "example": {
              "toToken[address]": "0x483dd3425278C1f79F377f1034d9d2CaE55648B6",
              "toToken[chainId]": 137,
              "toToken[decimals]": 18,
              "toToken[symbol]": "CROWD"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of ```fromToken``` to be swapped (The decimal of token must be considered in the amount)",
            "examples": {
              "1 MATIC (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": false,
            "in": "query",
            "description": "The price of the selected network's coin based on USD. __Example: ```price of BNB = 245.82```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": false,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "If provided, the API returns the swapTx as well as the estimation. The \"from\" address of the transaction will be the ```userAddress```. The \"to\" address will be the ```receiverAddress``` specified in the request, if provided; otherwise, it will default to the ```userAddress```.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "receiverAddress",
            "required": false,
            "in": "query",
            "description": "Address of the recipient. Provide this value only if it differs from the ```userAddress``` property.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amountOutMin",
            "required": false,
            "in": "query",
            "description": "The minimum amount out expected from a swap (This amount is available in the estimation result. Also the decimal of token must be considered in the amount)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "required": false,
            "in": "query",
            "description": "Swap estimation will be expired after this deadline (The unit of deadline is based on minutes)",
            "examples": {
              "15": {
                "value": "15"
              },
              "20": {
                "value": "20"
              },
              "30": {
                "value": "30"
              }
            },
            "schema": {
              "default": "30",
              "type": "string"
            }
          },
          {
            "name": "firstSwapName",
            "required": true,
            "in": "query",
            "description": "The name of the first dex. It is available in the estimation result.",
            "example": "Quickswap",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "secondSwapName",
            "required": true,
            "in": "query",
            "description": "The name of the second dex. It is available in the estimation result.",
            "example": "CrowdswapV2",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "middleToken",
            "required": true,
            "in": "query",
            "description": "The token which will be used as middle token between two dexes. It is available in the estimation result.",
            "example": {
              "fromToken[address]": "0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[symbol]": "USDC"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amountInFirstSwap",
            "required": true,
            "in": "query",
            "description": "An amount of ```fromToken``` to be swapped (The decimal of token must be considered in the amount)",
            "examples": {
              "1 MATIC (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "amountInSecondSwap",
            "required": true,
            "in": "query",
            "description": "An amount of ```middleToken``` to be swapped (The decimal of token must be considered in the amount)",
            "examples": {
              "1 USDC (decimals=6)": {
                "value": "1000000000000000000"
              },
              "1 MATIC (decimals=18)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SwapResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "swap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/crossChainSwap/estimate-all": {
      "get": {
        "operationId": "CrossChainSwapController_getAllCrossChainEstimate",
        "summary": "This endpoint returns the estimation details and the transaction data of a cross-chain",
        "description": "This endpoint identifies the optimal route for the requested cross-chain pair, potentially offering the best outcome. If the userAddress is provided, it additionally returns the transaction details to be sent to the blockchain.",
        "parameters": [
          {
            "name": "fromToken",
            "required": true,
            "in": "query",
            "description": "Source token. (Supported values for chainId are 1, 56, 137, 43114 and 42161)",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[symbol]": "MATIC"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amountIn",
            "required": true,
            "in": "query",
            "description": "An amount of ```fromToken``` to be swapped (The decimal of token must be considered in the amount)",
            "examples": {
              "1 MATIC (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": false,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "3",
              "type": "string"
            }
          },
          {
            "name": "toToken",
            "required": true,
            "in": "query",
            "description": "Destination token. (Supported values for chainId are 1, 56, 137, 43114 and 42161)",
            "example": {
              "toToken[address]": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
              "toToken[chainId]": 56,
              "toToken[decimals]": 18,
              "toToken[symbol]": "BNB"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "userAddress",
            "required": false,
            "in": "query",
            "description": "Address of the user who initiates the cross-chain transaction",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EstimatedCrossChainDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid parameters"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No estimation found for the given cross-chain pair"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "crossChainSwap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/crossChainSwap/status/{crosschain}": {
      "get": {
        "operationId": "CrossChainSwapController_getCrossChainStatus",
        "summary": "This endpoint returns the status of a cross-chain",
        "parameters": [
          {
            "name": "transactionHash",
            "required": true,
            "in": "query",
            "description": "The transaction hash on the source network",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "crosschain",
            "required": true,
            "in": "path",
            "description": "The number representing the cross-chain service used to initiate the cross-chain. This value, denoted as ```crossChain```, is accessible in the ```estimate-all``` response.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrosschainStatusResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "No status found for the given transaction hash"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "crossChainSwap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/crossChainSwap/cancel/{crosschain}": {
      "get": {
        "operationId": "CrossChainSwapController_getCancelTransaction",
        "summary": "This endpoint returns the transaction data to cancel a cross-chain",
        "description": "This endpoint returns the transaction needed to cancel a cross-chain. The transaction must be sent to the destination blockchain, where it will send a message to the source blockchain. The user funds, including all associated fees, will then be refunded.",
        "parameters": [
          {
            "name": "transactionHash",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "crosschain",
            "required": true,
            "in": "path",
            "description": "The number representing the cross-chain service used to initiate the cross-chain. This value, denoted as ```crossChain```, is accessible in the ```estimate-all``` result.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrosschainCancelResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "crossChainSwap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/crossChainSwap/operating-expenses": {
      "get": {
        "operationId": "CrossChainSwapController_getApproximateOperatingExpenses",
        "summary": "This endpoint returns the approximate operating expenses for a cross-chain",
        "description": "This endpoint provides an estimate of the operating expenses (execution cost) for a cross-chain. It is particularly useful when implementing max balance functionality. Deduct the ```operatingExpenses``` from the user balance before calling the estimate-all endpoint. If the source token is the coin of the source network, also deduct the ```fixFee```.",
        "parameters": [
          {
            "name": "fromToken",
            "required": true,
            "in": "query",
            "description": "Source token. (Supported values for chainId are 1, 56, 137, 43114 and 42161)",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[symbol]": "MATIC"
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "toToken",
            "required": true,
            "in": "query",
            "description": "Destination token. (Supported values for chainId are 1, 56, 137, 43114 and 42161)",
            "example": {
              "toToken[address]": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
              "toToken[chainId]": 56,
              "toToken[decimals]": 18,
              "toToken[symbol]": "BNB"
            },
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrosschainOperatingExpensesResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "tags": [
          "crossChainSwap"
        ],
        "security": [
          {
            "x-api-key": []
          }
        ]
      }
    },
    "/api/v1/opportunity/{opportunity}/investByToken": {
      "get": {
        "operationId": "OpportunityController_investByToken",
        "summary": "This endpoint returns the data for investing in an opportunity by a token except TokenA or Token B",
        "description": "This endpoint returns ```from```, ```to```, ```data```, ```value```, and ```gasLimit```, all of which needed for investing in an opportunity. Also it returns ```amountDesiredTokenA```, ```amountDesiredTokenB```, and ```amountLP``` to show to the investors.  \n  \n* An opportuniry name must be added to the url. e.g ```CROWD_USDT_LP_STAKE```, ```mai-usdc-mimatic```,and ```CAKE_WBNB_PANCAKE```",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User address who submits input tokens for an investment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "The token that user choose to invest with. (In investByTokenATokenB, we choose the token that user enter its amount first)",
            "example": {
              "token[address]": "0x0000000000000000000000000000000000001010",
              "token[chainId]": 137,
              "token[decimals]": 18,
              "token[name]": "Matic Token",
              "token[symbol]": "MATIC",
              "token[price]": 0.94036
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of input tokens to invest (The decimal of token must be considered in the amount)",
            "examples": {
              "1 ETH (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": true,
            "in": "query",
            "description": "The price of selected network's coin based on USD. __Example: ```price of BNB = 279.22```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": true,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "required": true,
            "in": "query",
            "description": "swap estimation will be expired after this deadline (the unit of deadline is based on minutes)",
            "examples": {
              "15": {
                "value": "15"
              },
              "20": {
                "value": "20"
              },
              "30": {
                "value": "30"
              }
            },
            "schema": {
              "default": "30",
              "type": "number"
            }
          },
          {
            "name": "x-correlation-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "opportunity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FarmOpportunityResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "opportunity"
        ]
      }
    },
    "/api/v1/opportunity/{opportunity}/investByTokenAAndTokenB": {
      "get": {
        "operationId": "OpportunityController_investByTokenAAndTokenB",
        "summary": "This endpoint returns the data for investing in an opportunity by a tokenA and Token B",
        "description": "This endpoint returns ```from```, ```to```, ```data```, ```value```, and ```gasLimit```, all of which needed for investing in an opportunity. Also it returns ```amountDesiredTokenA```, ```amountDesiredTokenB```, and ```amountLP``` to show to the investors.  \n  \n* An opportuniry name must be added to the url. e.g ```CROWD_USDT_LP_STAKE```, ```mai-usdc-mimatic```,and ```CAKE_WBNB_PANCAKE```",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User address who submits input tokens for an investment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "The token that user choose to invest with. (In investByTokenATokenB, we choose the token that user enter its amount first)",
            "example": {
              "token[address]": "0x0000000000000000000000000000000000001010",
              "token[chainId]": 137,
              "token[decimals]": 18,
              "token[name]": "Matic Token",
              "token[symbol]": "MATIC",
              "token[price]": 0.94036
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of input tokens to invest (The decimal of token must be considered in the amount)",
            "examples": {
              "1 ETH (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": true,
            "in": "query",
            "description": "The price of selected network's coin based on USD. __Example: ```price of BNB = 279.22```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": true,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "required": true,
            "in": "query",
            "description": "swap estimation will be expired after this deadline (the unit of deadline is based on minutes)",
            "examples": {
              "15": {
                "value": "15"
              },
              "20": {
                "value": "20"
              },
              "30": {
                "value": "30"
              }
            },
            "schema": {
              "default": "30",
              "type": "number"
            }
          },
          {
            "name": "x-correlation-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "opportunity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FarmOpportunityResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "opportunity"
        ]
      }
    },
    "/api/v1/opportunity/{opportunity}/investByTokenAOrTokenB": {
      "get": {
        "operationId": "OpportunityController_investByTokenAOrTokenB",
        "summary": "This endpoint returns the data for investing in an opportunity by a tokenA or Token B",
        "description": "This endpoint returns ```from```, ```to```, ```data```, ```value```, and ```gasLimit```, all of which needed for investing in an opportunity. Also it returns ```amountDesiredTokenA```, ```amountDesiredTokenB```, and ```amountLP``` to show to the investors.  \n  \n* An opportuniry name must be added to the url. e.g ```CROWD_USDT_LP_STAKE```, ```mai-usdc-mimatic```,and ```CAKE_WBNB_PANCAKE```",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User address who submits input tokens for an investment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "The token that user choose to invest with. (In investByTokenATokenB, we choose the token that user enter its amount first)",
            "example": {
              "token[address]": "0x0000000000000000000000000000000000001010",
              "token[chainId]": 137,
              "token[decimals]": 18,
              "token[name]": "Matic Token",
              "token[symbol]": "MATIC",
              "token[price]": 0.94036
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of input tokens to invest (The decimal of token must be considered in the amount)",
            "examples": {
              "1 ETH (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": true,
            "in": "query",
            "description": "The price of selected network's coin based on USD. __Example: ```price of BNB = 279.22```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": true,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "required": true,
            "in": "query",
            "description": "swap estimation will be expired after this deadline (the unit of deadline is based on minutes)",
            "examples": {
              "15": {
                "value": "15"
              },
              "20": {
                "value": "20"
              },
              "30": {
                "value": "30"
              }
            },
            "schema": {
              "default": "30",
              "type": "number"
            }
          },
          {
            "name": "x-correlation-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "opportunity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FarmOpportunityResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "opportunity"
        ]
      }
    },
    "/api/v1/opportunity/{opportunity}/investByLP": {
      "get": {
        "operationId": "OpportunityController_investByLP",
        "summary": "This endpoint returns the data for investing in an opportunity by LP token of the opportunity",
        "description": "This endpoint returns ```from```, ```to```, ```data```, ```value```, and ```gasLimit```, all of which needed for investing in an opportunity. Also it returns ```amountDesiredTokenA```, ```amountDesiredTokenB```, and ```amountLP``` to show to the investors.  \n  \n* An opportuniry name must be added to the url. e.g ```CROWD_USDT_LP_STAKE```, ```mai-usdc-mimatic```,and ```CAKE_WBNB_PANCAKE```",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User address who submits input tokens for an investment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "The token that user choose to invest with. (In investByTokenATokenB, we choose the token that user enter its amount first)",
            "example": {
              "token[address]": "0x0000000000000000000000000000000000001010",
              "token[chainId]": 137,
              "token[decimals]": 18,
              "token[name]": "Matic Token",
              "token[symbol]": "MATIC",
              "token[price]": 0.94036
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of input tokens to invest (The decimal of token must be considered in the amount)",
            "examples": {
              "1 ETH (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": true,
            "in": "query",
            "description": "The price of selected network's coin based on USD. __Example: ```price of BNB = 279.22```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": true,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "required": true,
            "in": "query",
            "description": "swap estimation will be expired after this deadline (the unit of deadline is based on minutes)",
            "examples": {
              "15": {
                "value": "15"
              },
              "20": {
                "value": "20"
              },
              "30": {
                "value": "30"
              }
            },
            "schema": {
              "default": "30",
              "type": "number"
            }
          },
          {
            "name": "x-correlation-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "opportunity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FarmOpportunityResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "opportunity"
        ]
      }
    },
    "/api/v1/opportunity/{opportunity}/leaveByLP": {
      "get": {
        "operationId": "OpportunityController_leaveByLP",
        "summary": "This endpoint returns the data for leave from an opportunity",
        "description": "This endpoint returns ```from```, ```to```, ```data```, ```value```, and ```gasLimit```, all of which needed for leaving from an opportunity. \n  \n* An opportuniry name must be added to the url. e.g ```CROWD_USDT_LP_STAKE```, ```mai-usdc-mimatic```,and ```CAKE_WBNB_PANCAKE```",
        "parameters": [
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User address who submits input tokens for an investment",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "token",
            "required": true,
            "in": "query",
            "description": "The token that user choose to invest with. (In investByTokenATokenB, we choose the token that user enter its amount first)",
            "example": {
              "token[address]": "0x0000000000000000000000000000000000001010",
              "token[chainId]": 137,
              "token[decimals]": 18,
              "token[name]": "Matic Token",
              "token[symbol]": "MATIC",
              "token[price]": 0.94036
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "amount",
            "required": true,
            "in": "query",
            "description": "An amount of input tokens to invest (The decimal of token must be considered in the amount)",
            "examples": {
              "1 ETH (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "networkCoinPrice",
            "required": true,
            "in": "query",
            "description": "The price of selected network's coin based on USD. __Example: ```price of BNB = 279.22```__ ",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": true,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "0.5",
              "type": "string"
            }
          },
          {
            "name": "deadline",
            "required": true,
            "in": "query",
            "description": "swap estimation will be expired after this deadline (the unit of deadline is based on minutes)",
            "examples": {
              "15": {
                "value": "15"
              },
              "20": {
                "value": "20"
              },
              "30": {
                "value": "30"
              }
            },
            "schema": {
              "default": "30",
              "type": "number"
            }
          },
          {
            "name": "x-correlation-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "opportunity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FarmOpportunityResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "opportunity"
        ]
      }
    },
    "/api/v1/opportunity/getDetails/{opportunity}": {
      "get": {
        "operationId": "OpportunityController_getDetails",
        "summary": "This endpoint returns the details of an opportunity",
        "description": "This endpoint returns ```tvl```, ```apy```, ```dailyInterest``` to inform users about how much the opportuniy profitable  \n  \n* An opportuniry name must be added to the url. e.g ```CROWD_USDT_LP_STAKE```, ```mai-usdc-mimatic```,and ```CAKE_WBNB_PANCAKE```",
        "parameters": [
          {
            "name": "tokenA",
            "required": true,
            "in": "query",
            "description": "tokenA",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[name]": "Matic Token",
              "fromToken[symbol]": "MATIC",
              "fromToken[price]": 0.94036
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "tokenB",
            "required": true,
            "in": "query",
            "description": "tokenB",
            "example": {
              "fromToken[address]": "0x0000000000000000000000000000000000001010",
              "fromToken[chainId]": 137,
              "fromToken[decimals]": 18,
              "fromToken[name]": "Matic Token",
              "fromToken[symbol]": "MATIC",
              "fromToken[price]": 0.94036
            },
            "schema": {
              "type": "object"
            }
          },
          {
            "name": "opportunity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OpportunityDetailResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "opportunity"
        ]
      }
    },
    "/api/v1/opportunity/{opportunity}/crossChainEstimation": {
      "get": {
        "operationId": "OpportunityController_getCrossChainEstimation",
        "summary": "This endpoint returns the data for investing in an opportunity by cross-chain",
        "description": "* An opportuniry name must be added to the url. e.g ```CROWD_USDT_LP_STAKE```, ```mai-usdc-mimatic```,and ```CAKE_WBNB_PANCAKE```",
        "parameters": [
          {
            "name": "srcChainId",
            "required": true,
            "in": "query",
            "description": "Source Chain Id",
            "examples": {
              "ETH": {
                "value": "1"
              },
              "BSC": {
                "value": "56"
              },
              "POLYGON": {
                "value": "137"
              }
            },
            "schema": {
              "default": "1",
              "type": "number"
            }
          },
          {
            "name": "srcChainTokenInAddress",
            "required": true,
            "in": "query",
            "description": "Source Chain Token Address",
            "examples": {
              "Ethereum": {
                "value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
              },
              "BNB": {
                "value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
              },
              "MATIC": {
                "value": "0x0000000000000000000000000000000000001010"
              }
            },
            "schema": {
              "default": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
              "type": "string"
            }
          },
          {
            "name": "srcChainTokenInAmount",
            "required": true,
            "in": "query",
            "description": "An amount of input tokens to cross-chain swap (The decimal of token must be considered in the amount)",
            "examples": {
              "1 ETH (decimals=18)": {
                "value": "1000000000000000000"
              },
              "1 USDT (decimals=6)": {
                "value": "1000000"
              },
              "1 BNB (decimals=18)": {
                "value": "1000000000000000000"
              }
            },
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "slippage",
            "required": true,
            "in": "query",
            "description": "A slippage constraint (in %) is a safeguard during swaps. It is used to calculate the minimum possible outcome during estimation.",
            "schema": {
              "default": "3",
              "type": "string"
            }
          },
          {
            "name": "dstChainId",
            "required": true,
            "in": "query",
            "description": "Destination Chain Id",
            "examples": {
              "ETH": {
                "value": "1"
              },
              "BSC": {
                "value": "56"
              },
              "POLYGON": {
                "value": "137"
              }
            },
            "schema": {
              "default": "56",
              "type": "number"
            }
          },
          {
            "name": "dstChainTokenOutAddress",
            "required": true,
            "in": "query",
            "description": "Destination Chain Token Address",
            "examples": {
              "BNB": {
                "value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
              },
              "Ethereum": {
                "value": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
              },
              "MATIC": {
                "value": "0x0000000000000000000000000000000000001010"
              }
            },
            "schema": {
              "default": "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE",
              "type": "string"
            }
          },
          {
            "name": "userAddress",
            "required": true,
            "in": "query",
            "description": "User address who submits input tokens for a cross-chain swap",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "x-correlation-id",
            "required": true,
            "in": "header",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "opportunity",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CrossChainEstimationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "opportunity"
        ]
      }
    }
  },
  "info": {
    "title": "CrowdSwap",
    "description": "The CrowdSwap API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "order",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "securitySchemes": {
      "x-api-key": {
        "type": "apiKey",
        "in": "header",
        "name": "x-api-key"
      }
    },
    "schemas": {
      "Trade": {
        "type": "object",
        "properties": {}
      },
      "EstimatedTradeDto": {
        "type": "object",
        "properties": {
          "swapName": {
            "type": "string"
          },
          "delegatedDex": {
            "type": "string"
          },
          "fromToken": {
            "type": "string"
          },
          "fromTokenPrice": {
            "type": "string"
          },
          "toToken": {
            "type": "string"
          },
          "toTokenPrice": {
            "type": "string"
          },
          "amountIn": {
            "type": "string"
          },
          "amountOut": {
            "type": "string"
          },
          "minAmountOut": {
            "type": "string"
          },
          "route": {
            "type": "string"
          },
          "reserves": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "priceImpact": {
            "type": "string"
          },
          "poolInfo": {
            "type": "string"
          },
          "swapFee": {
            "type": "string"
          },
          "networkFee": {
            "type": "string"
          },
          "gasPrice": {
            "type": "string"
          },
          "currentDexFeePercentage": {
            "type": "string"
          },
          "crowdswapFeePercentage": {
            "type": "string"
          },
          "swapFeeInUSDT": {
            "type": "string"
          },
          "networkFeeInUSDT": {
            "type": "string"
          },
          "crowdswapFeeInUSDT": {
            "type": "string"
          },
          "totalFeeInUSDT": {
            "type": "string"
          },
          "pricePerToken": {
            "type": "object",
            "example": "number"
          },
          "cost": {
            "type": "object",
            "example": "number"
          },
          "totalPaidInUSDT": {
            "type": "string"
          },
          "totalIncomeInUSDT": {
            "type": "string"
          },
          "amountOutInUSDT": {
            "type": "string"
          },
          "amountInInUSDT": {
            "type": "string"
          },
          "amountOutPerAmountInRatio": {
            "type": "string"
          },
          "amountInPerAmountOutRatio": {
            "type": "string"
          },
          "approveAddress": {
            "type": "string"
          },
          "tradeType": {
            "type": "object",
            "example": "number"
          },
          "trade": {
            "$ref": "#/components/schemas/Trade"
          }
        },
        "required": [
          "swapName",
          "delegatedDex",
          "fromToken",
          "fromTokenPrice",
          "toToken",
          "toTokenPrice",
          "amountIn",
          "amountOut",
          "minAmountOut",
          "route",
          "reserves",
          "priceImpact",
          "poolInfo",
          "swapFee",
          "networkFee",
          "gasPrice",
          "currentDexFeePercentage",
          "crowdswapFeePercentage",
          "swapFeeInUSDT",
          "networkFeeInUSDT",
          "crowdswapFeeInUSDT",
          "totalFeeInUSDT",
          "pricePerToken",
          "cost",
          "totalPaidInUSDT",
          "totalIncomeInUSDT",
          "amountOutInUSDT",
          "amountInInUSDT",
          "amountOutPerAmountInRatio",
          "amountInPerAmountOutRatio",
          "approveAddress",
          "tradeType",
          "trade"
        ]
      },
      "AllEstimationResponseDto": {
        "type": "object",
        "properties": {
          "successfulEstimationsList": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EstimatedTradeDto"
            }
          }
        },
        "required": [
          "successfulEstimationsList"
        ]
      },
      "SwapResponseDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Address of the user who initiates the transaction"
          },
          "to": {
            "type": "string",
            "description": "The contract address"
          },
          "data": {
            "type": "string",
            "description": "The populated data of the transaction"
          },
          "value": {
            "type": "string",
            "description": "The transaction value"
          },
          "gasLimit": {
            "type": "string",
            "description": "The transaction gas limit"
          }
        },
        "required": [
          "from",
          "to",
          "data",
          "value",
          "gasLimit"
        ]
      },
      "EstimatedCrossChainDto": {
        "type": "object",
        "properties": {
          "crossChain": {
            "type": "object",
            "example": "number"
          },
          "tokenIn": {
            "type": "object",
            "example": {
              "address": "string",
              "chainId": "number",
              "decimals": "number",
              "name": "string",
              "symbol": "string"
            }
          },
          "tokenOut": {
            "type": "object",
            "example": {
              "address": "string",
              "chainId": "number",
              "decimals": "number",
              "name": "string",
              "symbol": "string"
            }
          },
          "amountIn": {
            "type": "string"
          },
          "amountOut": {
            "type": "string"
          },
          "minAmountOut": {
            "type": "string"
          },
          "approveAddress": {
            "type": "string"
          },
          "status": {
            "type": "object",
            "example": "number"
          },
          "msg": {
            "type": "string"
          },
          "swapTx": {
            "type": "object",
            "example": {
              "to": "string",
              "data": "number",
              "value": "number",
              "gasLimit": "string"
            }
          },
          "fees": {
            "type": "object",
            "example": {
              "token": {
                "address": "string",
                "chainId": "number",
                "decimals": "number",
                "name": "string",
                "symbol": "string"
              },
              "amount": "string",
              "type": "number"
            }
          },
          "includedInOutputFees": {
            "type": "object",
            "example": {
              "token": {
                "address": "string",
                "chainId": "number",
                "decimals": "number",
                "name": "string",
                "symbol": "string"
              },
              "amount": "string",
              "type": "number"
            }
          }
        },
        "required": [
          "crossChain",
          "tokenIn",
          "tokenOut",
          "amountIn",
          "amountOut",
          "minAmountOut",
          "approveAddress",
          "status",
          "msg"
        ]
      },
      "CrosschainStatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the cross-chain"
          },
          "destTxHash": {
            "type": "string",
            "description": "The transaction hash on the destination network"
          },
          "cancelTxHash": {
            "type": "string",
            "description": "The cancel transaction hash on the source network"
          }
        },
        "required": [
          "status",
          "destTxHash",
          "cancelTxHash"
        ]
      },
      "CrosschainCancelResponseDto": {
        "type": "object",
        "properties": {
          "chainId": {
            "type": "object",
            "example": "number"
          },
          "from": {
            "type": "string"
          },
          "to": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "gasLimit": {
            "type": "string"
          },
          "cancelBeneficiary": {
            "type": "string"
          }
        },
        "required": [
          "chainId",
          "from",
          "to",
          "data",
          "value",
          "gasLimit",
          "cancelBeneficiary"
        ]
      },
      "CrosschainOperatingExpensesResponseDto": {
        "type": "object",
        "properties": {
          "operatingExpenses": {
            "type": "string",
            "description": "The execution cost of a cross-chain"
          },
          "fixFee": {
            "type": "string",
            "description": "The fixFee if the source token is the coin of the network"
          }
        },
        "required": [
          "operatingExpenses",
          "fixFee"
        ]
      },
      "SrcChainTokenIn": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "decimals": {
            "type": "number"
          },
          "amount": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals",
          "amount"
        ]
      },
      "SrcChainTokenOut": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "decimals": {
            "type": "number"
          },
          "amount": {
            "type": "string"
          },
          "minAmount": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals",
          "amount",
          "minAmount"
        ]
      },
      "DstChainTokenIn": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "decimals": {
            "type": "number"
          },
          "amount": {
            "type": "string"
          },
          "minAmount": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals",
          "amount",
          "minAmount"
        ]
      },
      "DstChainTokenOut": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "decimals": {
            "type": "number"
          },
          "amount": {
            "type": "string"
          },
          "minAmount": {
            "type": "string"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals",
          "amount",
          "minAmount"
        ]
      },
      "Token": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "decimals": {
            "type": "number"
          }
        },
        "required": [
          "address",
          "name",
          "symbol",
          "decimals"
        ]
      },
      "ExecutionFee": {
        "type": "object",
        "properties": {
          "token": {
            "$ref": "#/components/schemas/Token"
          },
          "recommendedAmount": {
            "type": "string"
          },
          "actualAmount": {
            "type": "string"
          }
        },
        "required": [
          "token",
          "recommendedAmount",
          "actualAmount"
        ]
      },
      "Estimation": {
        "type": "object",
        "properties": {
          "srcChainTokenIn": {
            "$ref": "#/components/schemas/SrcChainTokenIn"
          },
          "srcChainTokenOut": {
            "$ref": "#/components/schemas/SrcChainTokenOut"
          },
          "dstChainTokenIn": {
            "$ref": "#/components/schemas/DstChainTokenIn"
          },
          "dstChainTokenOut": {
            "$ref": "#/components/schemas/DstChainTokenOut"
          },
          "executionFee": {
            "$ref": "#/components/schemas/ExecutionFee"
          }
        },
        "required": [
          "srcChainTokenIn",
          "srcChainTokenOut",
          "dstChainTokenIn",
          "dstChainTokenOut",
          "executionFee"
        ]
      },
      "Tx": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "required": [
          "to",
          "data",
          "value"
        ]
      },
      "CrossChainEstimationResponseDto": {
        "type": "object",
        "properties": {
          "estimation": {
            "$ref": "#/components/schemas/Estimation"
          },
          "tx": {
            "$ref": "#/components/schemas/Tx"
          }
        },
        "required": [
          "estimation",
          "tx"
        ]
      },
      "FarmOpportunityResponseDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "User address who submits input tokens for a investment"
          },
          "to": {
            "type": "string",
            "description": "opportunity Contract address"
          },
          "data": {
            "type": "string",
            "description": "populated transaction"
          },
          "value": {
            "type": "string",
            "description": "transaction value"
          },
          "gasLimit": {
            "type": "string",
            "description": "transaction gas limit"
          },
          "amountDesiredTokenA": {
            "type": "string",
            "description": "The amount of TokenA that we use for add liquidity"
          },
          "amountDesiredTokenB": {
            "type": "string",
            "description": "The amount of TokenB that we use for add liquidity"
          },
          "amountLP": {
            "type": "string",
            "description": "Amount of LP token after add liquidity"
          }
        },
        "required": [
          "from",
          "to",
          "data",
          "value",
          "gasLimit",
          "amountDesiredTokenA",
          "amountDesiredTokenB",
          "amountLP"
        ]
      },
      "OpportunityDetailResponseDto": {
        "type": "object",
        "properties": {
          "tvl": {
            "type": "string",
            "description": "opportunity's TVL"
          },
          "apy": {
            "type": "string",
            "description": "opportunity's APY"
          },
          "dailyInterest": {
            "type": "string",
            "description": "opportunity's daily interest"
          }
        },
        "required": [
          "tvl",
          "apy",
          "dailyInterest"
        ]
      }
    }
  }
}